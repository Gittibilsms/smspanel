@model GittBilSmsCore.Models.Order
@using GittBilSmsCore.Models
@using System.Globalization
@using GittBilSmsCore.Helpers;
@{
    var timelineSteps = new List<KeyValuePair<string, string>>
        {
            new(SharedResource.Awaiting_Approval, "Awaiting approval"),
            new(SharedResource.Scheduled, "Scheduled"),
            new(SharedResource.Approved, "Shipping has started"),
            new(SharedResource.Cancelled, "Cancelled"),
            new(SharedResource.Sent, "Sent"),
            new(SharedResource.Failed, "Sending failed")
        };
    var actionDict = Model.Actions
       .GroupBy(a => a.ActionName)
       .ToDictionary(g => g.Key, g => g.First());

}
@{
    var localizedStatus = Model.CurrentStatus switch
    {
        "Sent" => SharedResource.Sent,
        "Failed" => SharedResource.Failed,
        "AwaitingApproval" or "Awaiting approval" => SharedResource.Awaiting_Approval,
        "Waiting to be sent" or "WaitingToBeSent" => SharedResource.Waiting_to_be_sent,
        "Shipping has started" => SharedResource.Approved,
        "Cancelled" => SharedResource.Cancelled,
        "Scheduled" => SharedResource.Scheduled,
        _ => Model.CurrentStatus
    };
}
@{
    var userType = Context.Session.GetString("UserType") ?? "User";
    var showExpired = userType == "Admin";
    var visibleUndelivered = Model.UndeliveredCount + (showExpired ? 0 : Model.ExpiredCount);
}
<div class="container-fluid py-4">
    <div class="card shadow-lg p-4" style="max-width: 1200px;">
        <div class="row">
            <!-- Timeline -->
            <div class="col-md-6 border-end">
                <h6 class="mb-3 text-white">@SharedResource.Order_Timeline</h6>
                @for (int i = 0; i < timelineSteps.Count; i++)
                {
                    var step = timelineSteps[i];
                    var displayName = step.Key;
                    var dbActionName = step.Value;

                    var hasAction = actionDict.ContainsKey(dbActionName);
                    var action = hasAction ? actionDict[dbActionName] : null;

                    var isFailed = dbActionName.Contains("failed", StringComparison.OrdinalIgnoreCase)
                    || dbActionName.Contains("submission", StringComparison.OrdinalIgnoreCase);

                    var successActions = new[] { "Sent", "Shipping has started", "Scheduled" };
                    var isSuccess = successActions.Contains(dbActionName, StringComparer.OrdinalIgnoreCase) && !isFailed;

                    <div class="d-flex align-items-start mb-4">
                        <div class="me-3 mt-1">
                            <span class="badge rounded-pill @(hasAction ? (isFailed ? "bg-danger" : isSuccess ? "bg-success" : "bg-primary") : "bg-secondary")">&nbsp;</span>

                            @if (i < timelineSteps.Count - 1)
                            {
                                <div class="border-start ms-2" style="height: 40px;"></div>
                            }
                        </div>

                        <div>
                            <h6 class="mb-1 card-title">
                                @if (isFailed && hasAction)
                                {
                                    <span style="color: red;" class="thisis">@displayName</span>
                                }
                                else if (isSuccess && hasAction)
                                {
                                    <span style="color: green;">@displayName</span>
                                }
                                else
                                {
                                    @displayName
                                }
                            </h6>

                            @if (isFailed && hasAction)
                            {
                                if (action != null && !string.IsNullOrEmpty(action.Message))
                                {
                                    var msg = action.Message;

                                    if (msg.Contains("No Quota", StringComparison.OrdinalIgnoreCase)
                                    || msg.Contains("Kota bulunamadı", StringComparison.OrdinalIgnoreCase))
                                    {
                                        <div class="small text-danger">@SharedResource.Noquota</div>
                                    }
                                    else if (msg.Contains("Insufficient", StringComparison.OrdinalIgnoreCase))
                                    {
                                        <div class="small text-danger">Insufficient fund</div>
                                    }
                                    else
                                    {
                                        if (User.IsInRole("Admin"))
                                        {
                                            <div class="small text-danger">(@msg)</div>
                                        }
                                        else
                                        {
                                            <div class="small text-danger">(Failed)</div>
                                        }
                                    }
                                }
                                else
                                {
                                    <div class="small text-danger">(Failed)</div>
                                }
                            }


                            @if (hasAction && action != null)
                            {
                                if (displayName == "Scheduled")
                                {
                                    <div class="small text-white">
                                        @action.Message
                                    </div>
                                }
                                else
                                {
                                    <div class="small text-white">
                                        @action.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }

            </div>

            <!-- Order Details -->
            <div class="col-md-6">
                <h6 class="mb-3">@SharedResource.Order #@Model.OrderId @SharedResource.Details</h6>
                <h6 class="mb-3 text-white">
                    @SharedResource.Order_Status
                    <span class="badge @(Model.CurrentStatus == "Sent" ? "bg-success" : Model.CurrentStatus == "Failed" ? "bg-danger" : "bg-warning text-dark") ms-2">
                        @localizedStatus
                    </span>
                </h6>

                @if (Model.CurrentStatus == "Failed"
                || Model.CurrentStatus == "Sending failed"
                || Model.CurrentStatus == "Submission failed")
                {
                    <button class="btn btn-warning btn-sm mb-3 resend-order-btn" data-order-id="@Model.OrderId">
                        🔄 @SharedResource.Resend
                    </button>

                    <div class="alert alert-danger mt-3">
                        <strong>@SharedResource.Status:</strong>
                        @if (!string.IsNullOrEmpty(Model.ApiErrorResponse))
                        {
                            if (Model.ApiErrorResponse.Contains("No Quota", StringComparison.OrdinalIgnoreCase))
                            {
                                // Show full message to all users
                                <pre>@SharedResource.Noquota</pre>
                            }
                            else if (Model.ApiErrorResponse.Contains("Insufficient", StringComparison.OrdinalIgnoreCase)
                            || Model.ApiErrorResponse.Contains("Quota", StringComparison.OrdinalIgnoreCase)
                            || Model.ApiErrorResponse.Contains("Kota", StringComparison.OrdinalIgnoreCase))
                            {
                                // Show generic message to all users
                                @:Insufficient fund
                            }
                            else
                            {
                                if (User.IsInRole("Admin"))
                                {
                                    <pre>@Model.ApiErrorResponse</pre>
                                }
                                else
                                {
                                    @:Failed
                                }
                            }
                        }
                        else
                        {
                            @:Failed
                        }
                        
                    </div>
                }

                <a href="/Orders/Details/@Model.OrderId" class="btn btn-outline-primary mt-3 ">
                    <i class="bi bi-eye"></i> @SharedResource.View_Full_Order_Details
                </a>

                <div class="mb-3 mt-3">
                    <label class="form-label"><strong>@SharedResource.MessageText:</strong></label>
                    <textarea class="form-control" rows="4" readonly>@Model.MessageText</textarea>
                </div>

                <!-- Counts -->
                <div class="row g-3 mb-2">
                    <div class="col-md-3 col-6"><div class="card text-center"><div class="fs-6 text-white d-flex">@SharedResource.Total: <span class="fw-bold">@Model.LoadedCount</span></div></div></div>
                    <div class="col-md-3 col-6"><div class="card text-center"><div class="fs-6 text-white d-flex">@SharedResource.Invalid: <span class="fw-bold">@Model.InvalidCount</span></div></div></div>
                </div>

                <div class="row g-3 mb-1">
                    <div class="col-md-3 col-6"><div class="card text-center"><div class="fs-6 text-white d-flex">@SharedResource.Processed: <span class="fw-bold">@Model.DeliveredCount</span></div></div></div>
                    <div class="col-md-3 col-6"><div class="card text-center"><div class="fs-6 text-white d-flex">@SharedResource.Undelivered: <span class="fw-bold">@visibleUndelivered</span></div></div></div>
                    @if (showExpired && Model.ExpiredCount > 0)
                    {
                        <div class="col-md-2 col-6"><div class="card text-center"><div class="fs-6 text-white d-flex">@SharedResource.Expired: <span class="fw-bold">@Model.ExpiredCount</span></div></div></div>
                    }
                </div>

                <!-- FILES Section -->
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <h6 class="mb-3">@SharedResource.Files</h6>
                        @{
                            var categories = new Dictionary<string, string>
                        {
                        { SharedResource.All, "All" },
                        { SharedResource.Blacklisted, "Blacklisted" },
                        { SharedResource.Filtered, "Filtered" },
                        { SharedResource.Invalid, "Invalid" },
                        { SharedResource.Processed, "Processed" }
                        };
                        }
                        <div class="row g-2">
                            @foreach (var kvp in categories)
                            {
                                var localizedLabel = kvp.Key;
                                var categoryValue = kvp.Value;
                                string baseUrl = $"/Downloads/Export?orderId={Model.OrderId}&type={(categoryValue == "All" ? "original" : categoryValue.ToLowerInvariant())}&format=csv";
                                <div class="col-md-4">
                                    <div class="dropdown w-100">
                                        <a class="btn btn-sm btn-outline-success w-100 dropdown-toggle" data-bs-toggle="dropdown">
                                            <i class="icon icon-download me-1"></i> @localizedLabel
                                        </a>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <a class="dropdown-item" href="@baseUrl.Replace("format=csv", "format=xlsx")">
                                                    @($"{SharedResource.Order_No}-{Model.OrderId} - {categoryValue}.xlsx")
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="@baseUrl">
                                                    @($"{SharedResource.Order_No}-{Model.OrderId} - {categoryValue}.csv")
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item" href="@baseUrl.Replace("format=csv", "format=txt")">
                                                    @($"{SharedResource.Order_No}-{Model.OrderId} - {categoryValue}.txt")
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- REPORT Section -->
                @if (Model.StartedAt.HasValue && Model.ReportLock == false)
                {
                    var reportReady = Model.StartedAt.Value.AddHours(48) <= DateTime.UtcNow.AddHours(3);

                    if (reportReady)
                    {
                        <hr class="my-4" />
                        <h4 class="mb-3">@SharedResource.Report</h4>
                      

                  
                            // these are the user‑visible labels
                            var reportLabels = new Dictionary<string,string> {
                                ["Summary"]     = SharedResource.Summary,
                                ["All"]         = SharedResource.All,
                                ["Waiting"]     = SharedResource.Waiting,
                                ["Forwarded"]   = SharedResource.Forwarded,
                                ["Undelivered"] = SharedResource.Undelivered,
                                ["Expired"]     = SharedResource.Expired
                            };

                            // these must match the _base_ file you have on disk (without extension):
                        var reportFiles = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                              {
                                ["Summary"] = "report-summary",    // <-- ASCII hyphen here
                                ["All"] = "original",
                                ["Waiting"] = "waiting",
                                ["Forwarded"] = "delivered",
                                ["Undelivered"] = "undelivered",
                                ["Expired"] = "expired"
                            };

                            // pick which reports to show
                            var reports = new[] { "Summary", "All", "Waiting", "Forwarded", "Undelivered" }
                                           .Concat(showExpired ? new[] { "Expired" } : Array.Empty<string>());
                        

                        <div class="row g-2">
                          @foreach (var report in reports)
                          {
                              var label    = reportLabels[report];
                              var baseName = reportFiles[report];

                              <div class="col-md-4">
                                <div class="dropdown w-100">
                                  <button class="btn btn-sm btn-outline-success w-100 dropdown-toggle"
                                          type="button" data-bs-toggle="dropdown">
                                    <i class="icon icon-download me-1"></i> @label
                                  </button>
                                  <ul class="dropdown-menu">
                                    @foreach (var ext in new[]{ "csv","txt","xlsx" })
                                    {
                                        // fileName is what your controller will look for
                                        var fileName   = $"{baseName}.{ext}";
                                        // downloadAs is the name the browser will save it as
                                        var downloadAs = $"Order No_{Model.OrderId} - {label}.{ext}";
                                        var url = Url.Action("DownloadReportFile","Home", new {
                                                      orderId    = Model.OrderId,
                                                      fileName,
                                                      reportName = downloadAs
                                                   });
                                        <li>
                                          <a class="dropdown-item" href="@url">
                                            @downloadAs
                                          </a>
                                        </li>
                                    }
                                  </ul>
                                </div>
                              </div>
                          }
                        </div>

                    }
                    else
                    {
                        <hr class="my-4" />
                        <p class="text-muted">@SharedResource.Report_will_be_available_after_48_hours_</p>
                    }
                }
                else
                {
                    <hr class="my-4" />
                    <p class="text-muted">@SharedResource.Report_not_yet_generated_</p>
                }
            </div>
        </div>
    </div>
</div>
